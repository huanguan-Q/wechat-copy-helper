// Generated by moon test.

fn moonbit_test_driver_internal_error_to_string(x : Error) -> String = "%error.to_string"

typealias @moonbitlang/core/builtin.Map[
  String,
  @moonbitlang/core/builtin.Map[
    Int,
    (() -> Unit raise Error, @moonbitlang/core/builtin.Array[String]),
  ],
] as Moonbit_Test_Driver_Internal_No_Args_Map

let moonbit_test_driver_internal_no_args_tests : Moonbit_Test_Driver_Internal_No_Args_Map = {
  "str_contains_test.mbt": {
    0: (__test_7374725f636f6e7461696e735f746573742e6d6274_0, ["str_contains - empty needle true for non-empty"]),
    1: (__test_7374725f636f6e7461696e735f746573742e6d6274_1, ["str_contains - empty needle true for empty"]),
    2: (__test_7374725f636f6e7461696e735f746573742e6d6274_2, ["str_contains - empty haystack and non-empty needle false"]),
    3: (__test_7374725f636f6e7461696e735f746573742e6d6274_3, ["str_contains - match at start"]),
    4: (__test_7374725f636f6e7461696e735f746573742e6d6274_4, ["str_contains - match in middle"]),
    5: (__test_7374725f636f6e7461696e735f746573742e6d6274_5, ["str_contains - match at end"]),
    6: (__test_7374725f636f6e7461696e735f746573742e6d6274_6, ["str_contains - no match"]),
    7: (__test_7374725f636f6e7461696e735f746573742e6d6274_7, ["str_contains - needle longer than haystack"]),
    8: (__test_7374725f636f6e7461696e735f746573742e6d6274_8, ["str_contains - overlapping pattern"]),
    9: (__test_7374725f636f6e7461696e735f746573742e6d6274_9, ["str_contains - unicode code unit preserved"]),
    10: (__test_7374725f636f6e7461696e735f746573742e6d6274_10, ["str_contains - large haystack scan"]),
  },
}

pub fn moonbit_test_driver_internal_execute(filename: MoonbitTestDriverInternalExternString, index: Int) -> Unit {
  let file_filter = moonbit_test_driver_internal_get_file_name(filename)
  let index_filter = index
  let filtered_test = match moonbit_test_driver_internal_no_args_tests.get(file_filter) {
    Some(index_func_map) => {
      index_func_map.get(index_filter)
    }
    _ => None
  }
  let mut test_name = ""
  let mut message = ""
  match filtered_test {
    Some(item) => {
      let (func, attrs) = (item.0, item.1)
      let name = if attrs.is_empty() { "" } else { attrs[0] }
      let name = if name.length() == 0 {
        index_filter.to_string()
      } else {
        name
      }
      test_name = name
      try {
        func()
      } catch {
        @moonbitlang/core/builtin.Failure(e) | @moonbitlang/core/builtin.InspectError(e) | @moonbitlang/core/builtin.SnapshotError(e) => {
          message = e
        }
        e => {
          message = moonbit_test_driver_internal_error_to_string(e)
        }
      }
    }
    _ => { message = "skipped test" }
  }

  let file_name = file_filter.escape()
  let test_name = test_name.escape()
  let message = message.escape()
  @moonbitlang/core/builtin.println("----- BEGIN MOON TEST RESULT -----")
  @moonbitlang/core/builtin.println(
    "{\"package\": \"moon/test/single\", \"filename\": \{file_name}, \"index\": \"\{index}\", \"test_name\": \{test_name}, \"message\": \{message}}",
  )
  @moonbitlang/core/builtin.println("----- END MOON TEST RESULT -----")
}

pub fn moonbit_test_driver_finish() -> Unit {
  
}

#test_entry
fn main {
  ()
}

fn moonbit_test_driver_internal_get_file_name(file_name : MoonbitTestDriverInternalExternString) -> String {
  moonbit_test_driver_internal_string_from_extern(file_name)
}

#external
type MoonbitTestDriverInternalStringReadHandle

#external
type MoonbitTestDriverInternalExternString

fn moonbit_test_driver_internal_begin_read_string(s : MoonbitTestDriverInternalExternString) -> MoonbitTestDriverInternalStringReadHandle = "__moonbit_fs_unstable" "begin_read_string"

fn moonbit_test_driver_internal_string_read_char(handle : MoonbitTestDriverInternalStringReadHandle) -> Int = "__moonbit_fs_unstable" "string_read_char"

fn moonbit_test_driver_internal_finish_read_string(handle : MoonbitTestDriverInternalStringReadHandle) = "__moonbit_fs_unstable" "finish_read_string"

fn fixedarray_to_bytes(arr : FixedArray[Byte]) -> Bytes = "%identity"

fn moonbit_unsafe_char_from_int(x : Int) -> Char = "%identity"

fn moonbit_test_driver_internal_string_from_extern(e : MoonbitTestDriverInternalExternString) -> String {
  let buf = FixedArray::make(512, Byte::default())
  let mut len = 0
  let handle = moonbit_test_driver_internal_begin_read_string(e)
  while true {
    let ch = moonbit_test_driver_internal_string_read_char(handle)
    if ch == -1 {
      break
    } else {
      let written_bytes_len = buf.set_utf16le_char(len, moonbit_unsafe_char_from_int(ch))
      len += written_bytes_len
    }
  }
  moonbit_test_driver_internal_finish_read_string(handle)
  fixedarray_to_bytes(buf).to_unchecked_string(offset = 0, length = len).to_string()
}
