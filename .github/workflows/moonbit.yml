name: MoonBit CI

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  moonbit:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: moonbit
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js (for copying artifact step)
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Cache MoonBit CLI and home
        uses: actions/cache@v4
        with:
          path: |
            ~/.moon
          key: moon-home-${{ runner.os }}-v1
          restore-keys: |
            moon-home-${{ runner.os }}-

      - name: Setup MoonBit CLI
        shell: bash
        run: |
          echo "$HOME/.moon/bin" >> $GITHUB_PATH
          export PATH="$HOME/.moon/bin:$PATH"
          if ! command -v moon >/dev/null 2>&1; then
            echo "Installing MoonBit CLI..."
            curl -fsSL --retry 3 https://cli.moonbitlang.com/install/unix.sh | bash
          fi
          which moon && moon version

      - name: Cache MoonBit target build
        uses: actions/cache@v4
        with:
          path: moonbit/target
          key: moon-target-${{ runner.os }}-${{ hashFiles('moonbit/moon.mod.json', 'moonbit/src/**') }}
          restore-keys: |
            moon-target-${{ runner.os }}-

      - name: Format check
        run: moon fmt --check

      - name: Static check
        run: moon check

      - name: Run tests
        run: |
          moon coverage clean
          moon test --enable-coverage

      - name: Run doc tests
        run: |
          moon test --doc --enable-coverage

      - name: Generate Public API report
        shell: bash
        run: |
          echo "### Public API surface" >> "$GITHUB_STEP_SUMMARY"
          {
            echo '```'
            grep -R -nE '^\s*pub\s+(fn|struct|enum|let)\b' src || true
            echo '```'
          } | tee public-api.txt >> "$GITHUB_STEP_SUMMARY"

      - name: Public API doc comments report (non-blocking)
        shell: bash
        run: |
          issues="/tmp/doc_issues.txt"
          rm -f "$issues"
          # Iterate public API items and check for preceding /// lines
          while IFS=: read -r file line rest; do
            if [ -z "$file" ] || [ -z "$line" ]; then
              continue
            fi
            if ! awk -v l="$line" 'NR>=l-3 && NR<l' "$file" | grep -qE '^\s*///'; then
              echo "$file:$line $rest" >> "$issues"
            fi
          done < <(grep -R -nE '^\s*pub\s+(fn|struct|enum|let)\b' src || true)

          total=$(grep -R -nE '^\s*pub\s+(fn|struct|enum|let)\b' src | wc -l | tr -d ' ' || echo 0)
          missing=$(wc -l < "$issues" 2>/dev/null | tr -d ' ' || echo 0)

          echo "### Public API doc comments report" >> "$GITHUB_STEP_SUMMARY"
          echo "Total public API items: ${total:-0}" >> "$GITHUB_STEP_SUMMARY"
          echo "Missing doc comments (checked up to 3 lines above): ${missing:-0}" >> "$GITHUB_STEP_SUMMARY"

          if [ -s "$issues" ]; then
            echo "" >> "$GITHUB_STEP_SUMMARY"
            echo "Details (first 50):" >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
            head -n 50 "$issues" >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
          fi

          cp "$issues" "$GITHUB_WORKSPACE/moonbit/public-api-doc-issues.txt" 2>/dev/null || true

      - name: Upload public API report
        uses: actions/upload-artifact@v4
        with:
          name: public-api
          path: ${{ github.workspace }}/moonbit/public-api.txt
          if-no-files-found: error

      - name: Upload public API doc issues
        uses: actions/upload-artifact@v4
        with:
          name: public-api-doc-issues
          path: ${{ github.workspace }}/moonbit/public-api-doc-issues.txt
          if-no-files-found: warn

      - name: Coverage (summary+HTML, enforce >=20%)
        run: |
          echo "Coverage summary:"
          moon coverage report -f summary | tee /tmp/cov.txt || true

          get_totals() {
            local file="$1"
            if [ -s "$file" ]; then
              local line
              line=$(grep -E 'Total:\s*[0-9]+/[0-9]+' "$file" | tail -n1)
              if [ -n "$line" ]; then
                echo "$line" | sed -n 's/Total: \([0-9]\+\)\/\([0-9]\+\)/\1 \2/p'
                return 0
              fi
            fi
            echo "0 0"
          }

          read covered total <<< "$(get_totals /tmp/cov.txt)"

          if [ "$total" -eq 0 ]; then
            echo "Coverage: 0.00% (no executable lines)"; exit 1
          fi

          pct=$(awk -v c="$covered" -v t="$total" 'BEGIN { printf "%.2f", (c/t)*100 }')
          echo "Coverage: $covered/$total => $pct%"

          awk -v p="$pct" 'BEGIN { if (p+0 < 20.0) { exit 1 } }' || { echo "Coverage below 20%"; exit 1; }

          # Generate HTML report
          moon coverage report -f html -o coverage-html || true

          # Generate full-module coverage summary (including 0% files)
          node "$GITHUB_WORKSPACE/scripts/moonbit_coverage_report.mjs" "/tmp/cov.txt" "$GITHUB_WORKSPACE/moonbit/src" "$GITHUB_WORKSPACE/moonbit/coverage-summary.json" "$GITHUB_WORKSPACE/moonbit/coverage-summary.md" || true

          # Append summary table to GitHub step summary
          echo "### MoonBit per-module coverage (full list incl. 0%)" >> "$GITHUB_STEP_SUMMARY"
          cat "$GITHUB_WORKSPACE/moonbit/coverage-summary.md" >> "$GITHUB_STEP_SUMMARY" || true

      - name: Upload coverage HTML artifact
        uses: actions/upload-artifact@v4
        with:
          name: moonbit-coverage-html
          path: ${{ github.workspace }}/moonbit/coverage-html
          if-no-files-found: error

      - name: Upload coverage summary artifact
        uses: actions/upload-artifact@v4
        with:
          name: moonbit-coverage-summary
          path: |
            ${{ github.workspace }}/moonbit/coverage-summary.json
            ${{ github.workspace }}/moonbit/coverage-summary.md
          if-no-files-found: error

      - name: JS batch equivalence tests
        working-directory: ${{ github.workspace }}/tests
        run: npm run -s test:batch

      - name: Build release
        run: moon build --release

      - name: Copy wasm artifact to extension root
        working-directory: ${{ github.workspace }}
        run: npm run build:wasm

      - name: Upload core.wasm artifact
        uses: actions/upload-artifact@v4
        with:
          name: core-wasm
          path: wasm/core.wasm
          if-no-files-found: error
